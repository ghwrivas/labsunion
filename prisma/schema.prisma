// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Todo {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  text      String
  completed Boolean
}

model Usuario {
  id                 Int      @id @default(autoincrement())
  nombre             String   @db.VarChar(45)
  apellido           String   @db.VarChar(45)
  fecha_nacimiento   DateTime @db.Date
  correo_electronico String   @unique @db.VarChar(45)
  role               Role     @default(ARBITRO)
  contrasenia        String   @db.VarChar(100)
  activo             Boolean  @default(false)
  usuarioJuegos      UsuarioJuego[]
  cuentasCobrar      CuentaCobrar[]
}

model Estadio {
  id                 Int      @id @default(autoincrement())
  nombre             String   @db.VarChar(45)
  activo             Boolean  @default(false)
  juegos             Juego[]
}

model CategoriaJuego {
  id      Int      @id @default(autoincrement())
  nombre  String   @db.VarChar(45)
  precio  Decimal  @db.Decimal(3,2)
  activo  Boolean  @default(false)
  juegos             Juego[]
}

model Periodo {
  id      Int            @id @default(autoincrement())
  anio    Int            @unique
  activo  Boolean        @default(false)
  cuentasCobrar          CuentaCobrar[]
}

model Juego {
  id                     Int             @id @default(autoincrement())
  fecha                  DateTime        @db.Date
  hora                   DateTime        @db.Time()
  precio                 Decimal         @db.Decimal(3,2)
  estadioId              Int 
  estadio                Estadio         @relation(fields: [estadioId], references: [id])
  categoriaJuegoId       Int
  categoriaJuego         CategoriaJuego  @relation(fields: [categoriaJuegoId], references: [id])
  comentarios            String?         @db.VarChar(100)
  estatus                EstatusJuego    @default(PROGRAMADO)
  usuarioJuegos          UsuarioJuego[]
  cuentaCobrarJuegos     CuentaCobrarJuego[]
}

model UsuarioJuego {
  id                     Int         @id @default(autoincrement())
  usuarioId              Int 
  usuario                Usuario     @relation(fields: [usuarioId], references: [id])
  juegoId                Int
  juego                  Juego       @relation(fields: [juegoId], references: [id])
}

model CuentaCobrar {
  id                     Int                   @id @default(autoincrement())
  monto                  Decimal               @db.Decimal(5,2)
  descripcion            String                @db.VarChar(100)
  usuarioId              Int   
  usuario                Usuario               @relation(fields: [usuarioId], references: [id])
  tipo                   TipoCuentaCobrar      @default(OTRO)
  periodoId              Int   
  periodo                Periodo               @relation(fields: [periodoId], references: [id])
  cuentaCobrarJuegos     CuentaCobrarJuego[]
  abonoCuentasCobrar     AbonoCuentaCobrar[]
  estatus                EstatusCuentaCobrar   @default(PENDIENTE)
}

model CuentaCobrarJuego {
  id                     Int             @id @default(autoincrement())
  cuentaCobrarId         Int 
  cuentaCobrar           CuentaCobrar    @relation(fields: [cuentaCobrarId], references: [id])
  juegoId                Int
  juego                  Juego           @relation(fields: [juegoId], references: [id])
}

model AbonoCuentaCobrar {
  id                     Int             @id @default(autoincrement())
  fecha                  DateTime        @db.Date
  monto                  Decimal         @db.Decimal(5,2)
  cuentaCobrarId         Int 
  cuentaCobrar           CuentaCobrar    @relation(fields: [cuentaCobrarId], references: [id])
  movimientoFinanzaAbonosCuentaCobrar MovimientoFinanzaAbonoCuentaCobrar[]
}

model MovimientoFinanza {
  id                     Int             @id @default(autoincrement())
  fecha                  DateTime        @db.Date
  descripcion            String          @db.VarChar(100)
  monto                  Decimal         @db.Decimal(5,2)
  saldo                  Decimal         @db.Decimal(5,2)
  tipo                   TipoMovimiento
  movimientoFinanzaAbonosCuentaCobrar MovimientoFinanzaAbonoCuentaCobrar[]
}

model MovimientoFinanzaAbonoCuentaCobrar {
  id                         Int                  @id @default(autoincrement())
  movimientoFinanzaId        Int 
  movimientoFinanza          MovimientoFinanza    @relation(fields: [movimientoFinanzaId], references: [id])
  abonoCuentaCobrarId        Int
  abonoCuentaCobrar          AbonoCuentaCobrar    @relation(fields: [abonoCuentaCobrarId], references: [id])
}

enum Role {
  ARBITRO
  COORDINADOR
  PRESIDENTE
  TESORERO
  SECRETARIO
  ADMIN
}

enum TipoCuentaCobrar {
  FINANZA_POR_JUEGO
  VENTA_DE_ARTICULO
  DEUDA_PERIODO_ANTERIOR
  OTRO
}

enum EstatusCuentaCobrar {
  PENDIENTE
  PAGADO
}


enum EstatusJuego {
  PROGRAMADO
  REALIZADO
  SUSPENDIDO
  REALIZADO_SIN_PAGO
}

enum TipoMovimiento {
  ABONO_CUENTA_COBRAR
  CAPITAL_INICIAL
  GASTO
}